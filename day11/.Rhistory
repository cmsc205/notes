N <- 20   # set total wealth
p <- 0.5  # set prob. A wins a bet
i <- 10   # A's initial wealth
bets <- 0
while(i > 0 && N - i > 0) {
bets <- bets + 1
outcome <- rbinom(1, n = 1, p = 0.5)
if(outcome == 1) {
i <- i + 1
} else {
i <- i - 1
}
}
N <- 20   # set total wealth
p <- 0.5  # set prob. A wins a bet
i <- 10   # A's initial wealth
bets <- 0 # initializing no. of bets
while(i > 0 & (N - i) > 0) {
bets <- bets + 1
outcome <- rbinom(1, n = 1, p = p)
if (outcome == 1) {
i <- i + 1
} else {
i <- i - 1
}
}
bets
library(tidyverse)
library(readr)
sf2016 <- read_csv("https://github.com/cmsc205/notes/raw/master/day11/sf2016.csv")
glimpse(sf2016)
sf2016 %>%
select(Job, TotalCompensation, everything()) %>%
arrange(TotalCompensation) %>%
head()
sf2016 <- filter(sf2016, TotalCompensation >= 10000)
glimpse(sf2016)
sf2016 %>%
ggplot(aes(x = TotalCompensation)) +
geom_histogram(binwidth = 25000, fill = "steelblue4")
sf2016 %>%
summarize(median = median(TotalCompensation),
mean = mean(TotalCompensation))
our_sample <- sf2016 %>%
sample_n(size = 500)
our_sample %>%
ggplot(aes(x = TotalCompensation)) +
geom_histogram(binwidth = 25000, fill = "steelblue4")
median(our_sample$TotalCompensation)
B <- 5000 # No. of bootstrap statsistics desired
n <- nrow(our_sample)
medians <- numeric(length = B) # Place to store the stats
for(b in 1:B) {
boot_sample <- sample(our_sample$TotalCompensation,
size = n,
replace = TRUE)
medians[b] <- median(boot_sample)
}
head(medians)
length(medians)
summary(medians)
boot_df <- data.frame(medians = medians)
ggplot(data = boot_df, aes(x = medians)) +
geom_histogram(fill = "steelblue4", bins = 10)
ci <- quantile(medians, probs = c(.025, .975))
ci
boot_df <- data.frame(medians = medians)
ggplot(data = boot_df, aes(x = medians)) +
geom_histogram(fill = "steelblue4", bins = 10) +
geom_segment(x = ci[1], y = 0, xend = ci[2], yend = 0,
color = "gold", size = 2)
ci80 <- quantile(medians, probs = c(.1, .9))
ci80
boot_df <- data.frame(medians = medians)
ggplot(data = boot_df, aes(x = medians)) +
geom_histogram(fill = "steelblue4", bins = 10) +
geom_segment(x = ci80[1], y = 0, xend = ci80[2], yend = 0, color = "gold", size = 2)
pop_median <- median(sf2016$TotalCompensation)
pop_median
boot_df <- data.frame(medians = medians)
ggplot(data = boot_df, aes(x = medians)) +
geom_histogram(fill = "steelblue4", bins = 10) +
geom_segment(x = ci[1], y = 0, xend = ci[2], yend = 0, color = "gold", size = 2) +
geom_point(x = pop_median, y = 0, color = "red")
boot_df <- data.frame(medians = medians)
ggplot(data = boot_df, aes(x = medians)) +
geom_histogram(fill = "steelblue4", bins = 10) +
geom_segment(x = ci80[1], y = 0, xend = ci80[2], yend = 0, color = "gold", size = 2) +
geom_point(x = pop_median, y = 0, color = "red")
# Initialize everything
B <- 5000
n <- nrow(our_sample)
intervals <- data.frame(rep = integer(100),
lower = numeric(100),
upper = numeric(100))
for(i in 1:100){
# Obtain the sampled data
in_hand <- sf2016 %>%
sample_n(size = 500)
# Run the bootstrap to get the means
medians <- numeric(length = B)
for(b in 1:B) {
boot_sample <- sample(in_hand$TotalCompensation,
size = n,
replace = TRUE)
medians[b] <- median(boot_sample)
}
# Calculate the interval and store the results
intervals[i,] <- c(i, quantile(medians, probs = c(.05, .95)))
}
intervals <- intervals %>%
group_by(rep) %>%
mutate(contain = lower <= pop_median & upper >= pop_median)
ggplot(data = intervals, aes(x = rep, y = upper)) +
geom_hline(yintercept = pop_median, color = "red") +
geom_linerange(aes(ymin = lower, ymax = upper, color = contain)) +
coord_flip() +
scale_color_manual("Contains\nparameter", values = c("gold", "steelblue4"))
