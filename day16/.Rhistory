library(rpart)
library(tidyverse)
carseats <- read.csv("Carseats.csv")
carseats <- carseats %>%
mutate(High = as.factor(ifelse(Sales <= 8, "No", "Yes")))
set.seed(2202017)
train <- carseats %>%
sample_n(200)
test <- carseats %>%
setdiff(train)
tree_carseats <- rpart(High ~ . - Sales, data = train, method = "class")
tree_carseats
preds <- predict(tree_carseats, type = "class")
table(Prediction = preds, Truth = train$High)
mean(preds == train$High)     # training accuracy
1 - mean(preds == train$High) # training error rate
plot(tree_carseats)
text(tree_carseats, pretty = 0)
library(partykit)
plot(as.party(tree_carseats))
library(rpart.plot)
install.packages("rpart.plot")
library(rpart)
library(tidyverse)
carseats <- read.csv("Carseats.csv")
carseats <- carseats %>%
mutate(High = as.factor(ifelse(Sales <= 8, "No", "Yes")))
set.seed(2202017)
train <- carseats %>%
sample_n(200)
test <- carseats %>%
setdiff(train)
tree_carseats <- rpart(High ~ . - Sales, data = train, method = "class")
tree_carseats
preds <- predict(tree_carseats, type = "class")
table(Prediction = preds, Truth = train$High)
mean(preds == train$High)     # training accuracy
1 - mean(preds == train$High) # training error rate
plot(tree_carseats)
text(tree_carseats, pretty = 0)
library(partykit)
plot(as.party(tree_carseats))
library(rpart.plot)
rpart.plot(tree_carseats)
tree_carseats
tree_pred <-  predict(tree_carseats, test, type = "class")
table(tree_pred, test$High)
plotcp(tree_carseats)
printcp(tree_carseats)
str(printcp(tree_carseats))
str(tree_carseats)
tree_carseats$cptable
prds
preds
tree_pred != test$High
mean(tree_pred != test$High)
prune_df <- as.data.frame(tree_carseats$cptable)
prune_df
names(prune_df)
ggplot(data = prune_df, aes(x = nsplit + 1, y = `rel error`)) +
geom_point() +
geom_line()
prune_df <- as.data.frame(tree_carseats$cptable)
ggplot(data = prune_df, aes(x = nsplit + 1, y = `rel error`)) +
geom_point(color = "purple") +
geom_line(color = "purple") +
labs(x = "Size of tree", y = "Rekative misclassification error")
prune_df
gather(prune_df, key = "source", `rel error`, xerror)
gather(prune_df, key = "source", c(`rel error`, xerror))
?gather
stocks <- data_frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
gather(prune_df, key = "source", value = "error", `rel error`, xerror)
prune_df_tidy$source
prune_df_tidy <- gather(prune_df, key = "source", value = "error", `rel error`, xerror)
prune_df_tidy$source
levels(prune_df_tidy$source)
levels(factor(prune_df_tidy$source))
prune_df_tidy$source <- factor(prune_df_tidy$source, levels = c("training", "cv"))
ggplot(data = prune_df, aes(x = nsplit + 1, y = error, color = source)) +
geom_point() +
geom_line() +
labs(x = "Size of tree", y = "Rekative misclassification error")
ggplot(data = prune_df_tidy, aes(x = nsplit + 1, y = error, color = source)) +
geom_point() +
geom_line() +
labs(x = "Size of tree", y = "Rekative misclassification error")
prune_df_tidy
prune_df_tidy <- gather(prune_df, key = "source", value = "error", `rel error`, xerror)
prune_df_tidy$source <- factor(prune_df_tidy$source, labels =  = c("training", "cv"))
prune_df_tidy <- gather(prune_df, key = "source", value = "error", `rel error`, xerror)
prune_df_tidy$source <- factor(prune_df_tidy$source, labels = c("training", "cv"))
ggplot(data = prune_df_tidy, aes(x = nsplit + 1, y = error, color = source)) +
geom_point() +
geom_line() +
labs(x = "Size of tree", y = "Rekative misclassification error")
library(tidyr)
prune_df <- as.data.frame(tree_carseats$cptable)
prune_df_tidy <- gather(prune_df, key = "source", value = "error", `rel error`, xerror)
prune_df_tidy$source <- factor(prune_df_tidy$source, labels = c("training", "cv"))
ggplot(data = prune_df_tidy, aes(x = factor(nsplit + 1), y = error, color = source)) +
geom_point() +
geom_line() +
labs(x = "Size of tree", y = "Rekative misclassification error") +
theme_minimal()
ggplot(data = prune_df_tidy, aes(x = nsplit + 1, y = error, color = source)) +
geom_point() +
geom_line() +
labs(x = "Size of tree", y = "Rekative misclassification error") +
scale_x_discrete() +
theme_minimal()
?scale_x_discrete
?scale_x_continuous
prune_df
library(tidyr)
prune_df <- as.data.frame(tree_carseats$cptable)
prune_df_tidy <- gather(prune_df, key = "source", value = "error", `rel error`, xerror)
prune_df_tidy$source <- factor(prune_df_tidy$source, labels = c("training", "cv"))
ggplot(data = prune_df_tidy, aes(x = nsplit + 1, y = error, color = source)) +
geom_point() +
geom_line() +
labs(x = "Size of tree", y = "Rekative misclassification error") +
scale_x_continuous(breaks = 1:9) +
theme_minimal()
ggplot(data = prune_df_tidy, aes(x = nsplit + 1, y = error, color = source)) +
geom_point() +
geom_line() +
labs(x = "Size of tree", y = "Rekative misclassification error") +
scale_x_continuous(breaks = 1:9) +
theme_minimal() +
scale_color_manual(values = c("dodgerblue", "green"))
library(tidyr)
prune_df <- as.data.frame(tree_carseats$cptable)
prune_df_tidy <- gather(prune_df, key = "source", value = "error", `rel error`, xerror)
prune_df_tidy$source <- factor(prune_df_tidy$source, labels = c("training", "cv"))
ggplot(data = prune_df_tidy, aes(x = nsplit + 1, y = error, color = source)) +
geom_point() +
geom_line() +
labs(x = "Size of tree", y = "Rekative misclassification error") +
scale_x_continuous(breaks = 1:9) +
theme_minimal() +
scale_color_manual(values = c("#7fc97f", "#beaed4"))
library(tidyr)
prune_df <- as.data.frame(tree_carseats$cptable)
prune_df_tidy <- gather(prune_df, key = "source", value = "error", `rel error`, xerror)
prune_df_tidy$source <- factor(prune_df_tidy$source, labels = c("training", "cv"))
ggplot(data = prune_df_tidy, aes(x = nsplit + 1, y = error, color = source)) +
geom_point() +
geom_line() +
labs(x = "Size of tree", y = "Rekative misclassification error") +
scale_x_continuous(breaks = 1:9) +
theme_minimal() +
scale_color_manual(values = c("#1b9e77", "#d95f02"))
library(tidyr)
prune_df <- as.data.frame(tree_carseats$cptable)
prune_df_tidy <- gather(prune_df, key = "source", value = "error", `rel error`, xerror)
prune_df_tidy$source <- factor(prune_df_tidy$source, labels = c("training", "cv"))
ggplot(data = prune_df_tidy, aes(x = nsplit + 1, y = error, color = source)) +
geom_point() +
geom_line() +
labs(x = "Size of tree", y = "Relative misclassification error") +
scale_x_continuous(breaks = 1:9) +
theme_minimal() +
scale_color_manual(values = c("#1b9e77", "#d95f02"))
prune_df_tidy
library(tidyr)
prune_df <- as.data.frame(tree_carseats$cptable)
prune_df_tidy <- gather(prune_df, key = "source", value = "error", `rel error`, xerror)
prune_df_tidy$source <- factor(prune_df_tidy$source, labels = c("training", "cv"))
ggplot(data = prune_df_tidy, aes(x = nsplit + 1, y = error, color = source)) +
geom_point() +
geom_line() +
labs(x = "No. of terminal nodes", y = "Relative misclassification error") +
scale_x_continuous(breaks = 1:9) +
theme_minimal() +
scale_color_manual(values = c("#1b9e77", "#d95f02"))
cptable(carseats)
cptable(tree_carseats)
?rpart
?plotcp
tree_carseats$cptable
rpart
pruned_tree <- prune(tree_carseats, cp = .02)
print(pruned_tree)
?prune
summary(pruned_tree)
summary(tree_carseats)
opt <- which.min(tree_carseats$cptable[,"xerror"])
opt_cp <- tree_carseats$cptable[opt, "CP"]
carseats_prune <- prune(tree_carseats, cp = opt_cp)
carseatsprune
opt <- which.min(tree_carseats$cptable[,"xerror"])
opt_cp <- tree_carseats$cptable[opt, "CP"]
carseats_prune <- prune(tree_carseats, cp = opt_cp)
carseats_prune
rpart.plot(carseats_prune)
pruned_tree <- prune(tree_carseats, cp = .02)
rpart.plot(pruned_tree)
tree_pred <- predict(prune_carseats, test, type = "class")
tree_pred <- predict(carseats_prune, test, type = "class")
table(tree_pred, test$High)
mean(tree_pred == test$High)
tree_pred2 <- predict(carseats_prune, test, type = "class")
# Confusion matrix
table(tree_pred2, test$High)
# Accuracy
mean(tree_pred2 == test$High)
library(rpart)
library(tidyverse)
carseats <- read.csv("Carseats.csv")
carseats <- carseats %>%
mutate(High = as.factor(ifelse(Sales <= 8, "No", "Yes")))
set.seed(2202017)
train <- carseats %>%
sample_n(200)
test <- carseats %>%
setdiff(train)
tree_carseats <- rpart(High ~ . - Sales, data = train, method = "class")
tree_carseats
preds <- predict(tree_carseats, type = "class")
table(Prediction = preds, Truth = train$High)
mean(preds == train$High)     # training accuracy
1 - mean(preds == train$High) # training error rate
plot(tree_carseats)
text(tree_carseats, pretty = 0)
library(partykit)
plot(as.party(tree_carseats))
library(rpart.plot)
rpart.plot(tree_carseats)
tree_carseats
tree_pred <-  predict(tree_carseats, test, type = "class")
table(tree_pred, test$High)
library(tidyr)
prune_df <- as.data.frame(tree_carseats$cptable)
prune_df_tidy <- gather(prune_df, key = "source", value = "error", `rel error`, xerror)
prune_df_tidy$source <- factor(prune_df_tidy$source, labels = c("training", "cv"))
ggplot(data = prune_df_tidy, aes(x = nsplit + 1, y = error, color = source)) +
geom_point() +
geom_line() +
labs(x = "No. of terminal nodes", y = "Relative misclassification error") +
scale_x_continuous(breaks = 1:9) +
theme_minimal() +
scale_color_manual(values = c("#1b9e77", "#d95f02"))
tree_carseats$cptable
pruned_tree <- prune(tree_carseats, cp = .02)
rpart.plot(pruned_tree)
opt <- which.min(tree_carseats$cptable[,"xerror"])
opt_cp <- tree_carseats$cptable[opt, "CP"]
carseats_prune <- prune(tree_carseats, cp = opt_cp)
carseats_prune
rpart.plot(carseats_prune)
tree_pred2 <- predict(carseats_prune, test, type = "class")
# Confusion matrix
table(tree_pred2, test$High)
table(tree_pred, test$High)
pruned_pred <- predict(pruned_tree, test, type = "class")
table(pruned_pred, test$High)
# Accuracy
mean(pruned_pred == test$High)
tree_carseats$cptable
printcp(tree_carseats)
library(rpart)
library(tidyverse)
carseats <- read.csv("Carseats.csv")
carseats <- carseats %>%
mutate(High = as.factor(ifelse(Sales <= 8, "No", "Yes")))
set.seed(2202017)
train <- carseats %>%
sample_n(200)
test <- carseats %>%
setdiff(train)
tree_carseats <- rpart(High ~ . - Sales, data = train, method = "class")
tree_carseats
preds <- predict(tree_carseats, type = "class")
table(Prediction = preds, Truth = train$High)
mean(preds == train$High)     # training accuracy
1 - mean(preds == train$High) # training error rate
plot(tree_carseats)
text(tree_carseats, pretty = 0)
library(partykit)
plot(as.party(tree_carseats))
library(rpart.plot)
rpart.plot(tree_carseats)
tree_carseats
tree_pred <-  predict(tree_carseats, test, type = "class")
table(tree_pred, test$High)
library(tidyr)
prune_df <- as.data.frame(tree_carseats$cptable)
prune_df_tidy <- gather(prune_df, key = "source", value = "error", `rel error`, xerror)
prune_df_tidy$source <- factor(prune_df_tidy$source, labels = c("training", "cv"))
ggplot(data = prune_df_tidy, aes(x = nsplit + 1, y = error, color = source)) +
geom_point() +
geom_line() +
labs(x = "No. of terminal nodes", y = "Relative misclassification error") +
scale_x_continuous(breaks = 1:9) +
theme_minimal() +
scale_color_manual(values = c("#1b9e77", "#d95f02"))
printcp(tree_carseats)
tree_carseats$cptable
pruned_tree <- prune(tree_carseats, cp = .02)
rpart.plot(pruned_tree)
opt <- which.min(tree_carseats$cptable[,"xerror"])
opt_cp <- tree_carseats$cptable[opt, "CP"]
carseats_prune <- prune(tree_carseats, cp = opt_cp)
carseats_prune
rpart.plot(carseats_prune)
pruned_pred <- predict(pruned_tree, test, type = "class")
# Confusion matrix
table(pruned_pred, test$High)
# Accuracy
mean(pruned_pred == test$High)
